name: CI/CD

on:
  push:
    branches:
      - main
    paths:
      - "Docker/backend/src/**"

jobs:
  build-and-test:
    name: CI
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2

      # - name: Install necessary libraries
      #   run: sudo apt-get install libssl1.1 libssl-dev

      - name: Install Dependencies
        working-directory: Docker/backend/src
        run: bundle install

      - name: Run Rubocop
        working-directory: Docker/backend/src
        run: bundle exec rubocop

      - name: Run RSpec
        working-directory: Docker/backend/src
        run: bundle exec rspec

  deploy:
    name: CD
    needs: build-and-test
    runs-on: ubuntu-latest
    container:
      image: amazonlinux:2

    steps:
      - name: Install necessary dependencies
        run: |
          yum install -y gcc make openssl-devel zlib-devel tar gzip git libyaml-devel libreadline-dev libssl-dev

      - name: Install Ruby
        run: |
          curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer | bash -
          echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
          echo 'eval "$(rbenv init -)"' >> ~/.bashrc
          source ~/.bashrc
          rbenv install 3.2.2
          rbenv global 3.2.2
          gem install bundler

      - name: Install Node.js
        run: |
          curl -sL https://rpm.nodesource.com/setup_14.x | bash -
          yum install -y nodejs

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Bundle install
        run: |
          echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
          echo 'eval "$(rbenv init -)"' >> ~/.bashrc
          source ~/.bashrc
          cd Docker/backend/src
          rbenv rehash
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Install Serverless CLI
        run: npm install -g serverless

      - name: Deploy to Lambda and API Gateway
        working-directory: Docker/backend/src
        run: serverless deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.MY_AWS_REGION }}
          BACKEND_AWS_S3_BUCKET: ${{ secrets.MY_BACKEND_AWS_S3_BUCKET }}
